{
	"version": 1,
	"collections": [
		{
			"id": "33ac38c6-b1d5-4273-8a20-ae2fbd8e71af",
			"name": "Dog API testing",
			"description": "Collection of tests for the dog API",
			"auth": null,
			"events": null,
			"variables": [],
			"order": [
				"c4ee9470-6e5f-468d-8f4e-0aea58bd0fdb",
				"d3e5229c-e9e9-48b5-8d11-67854a303ff2",
				"9cae2533-022b-467d-81bc-2677ef84e453",
				"74557163-c736-4fb3-bfd9-fdcf0e8006e1",
				"f1c9e6d4-d987-4b38-b86b-c89e9086a044",
				"ac54c874-7b9c-4b9a-98d2-84b4416f44a1",
				"6c13b81d-7e40-4472-ad3b-90dcb18588d1",
				"fdbdf70a-8302-4ed6-b535-ede4537e73e9"
			],
			"folders_order": [],
			"folders": [],
			"requests": [
				{
					"id": "6c13b81d-7e40-4472-ad3b-90dcb18588d1",
					"name": "https://dog.ceo/api/breed/retriever/golden/images",
					"url": "https://dog.ceo/api/breed/retriever/golden/images",
					"description": "Request for a list of images of golden retrievers",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "c86e24ef-cff2-458f-b9a5-e9697877c8e0",
								"type": "text/javascript",
								"exec": [
									"//make sure the request is okay",
									"pm.test(\"response is okay\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//ensure the response is not empty and in json format",
									"pm.test(\"response is not empty and in JSON format\", function() {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})",
									"",
									"//ensure the message is an array",
									"pm.test(\"response message is non empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.message.length).to.be.greaterThan(0);",
									"});",
									"",
									"//ensure the list of images are jpg and are of hounds",
									"pm.test(\"response image are jpgs and are golden retrievers\", function() {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    for (var image of jsonData.message) {",
									"        pm.expect(image).to.include(\".jpg\");",
									"        pm.expect(image).to.include(\"retriever-golden\");",
									"    }",
									"});",
									""
								]
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "//make sure the request is okay\npm.test(\"response is okay\", function() {\n    pm.response.to.have.status(200);\n});\n\n//ensure the response is not empty and in json format\npm.test(\"response is not empty and in JSON format\", function() {\n    pm.response.to.be.withBody;\n    pm.response.to.be.json;\n})\n\n//ensure the message is an array\npm.test(\"response message is non empty\", function () {\n    var jsonData = pm.response.json();\n    \n    pm.expect(jsonData.message.length).to.be.greaterThan(0);\n});\n\n//ensure the list of images are jpg and are of hounds\npm.test(\"response image are jpgs and are golden retrievers\", function() {\n    var jsonData = pm.response.json();\n    \n    for (var image of jsonData.message) {\n        pm.expect(image).to.include(\".jpg\");\n        pm.expect(image).to.include(\"retriever-golden\");\n    }\n});\n",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "33ac38c6-b1d5-4273-8a20-ae2fbd8e71af",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "74557163-c736-4fb3-bfd9-fdcf0e8006e1",
					"name": "https://dog.ceo/api/breed/hound/images",
					"url": "https://dog.ceo/api/breed/hound/images",
					"description": "Request a list of images under the hound breed",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "0e32269e-298c-4009-bd92-cd36208a33b0",
								"type": "text/javascript",
								"exec": [
									"//make sure the request is okay",
									"pm.test(\"response is okay\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//ensure the response is not empty and in json format",
									"pm.test(\"response is not empty and in JSON format\", function() {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"//ensure the message is an array",
									"pm.test(\"response message is a non empty array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message.length).to.be.greaterThan(0);",
									"});",
									"",
									"//ensure the list of images are jpg and are of hounds",
									"pm.test(\"response images are jpg and are of hounds\", function() {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    for (var image of jsonData.message) {",
									"        pm.expect(image).to.include(\".jpg\");",
									"        pm.expect(image).to.include(\"hound\");",
									"    }",
									"});",
									""
								]
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "//make sure the request is okay\npm.test(\"response is okay\", function() {\n    pm.response.to.have.status(200);\n});\n\n//ensure the response is not empty and in json format\npm.test(\"response is not empty and in JSON format\", function() {\n    pm.response.to.be.withBody;\n    pm.response.to.be.json;\n});\n\n//ensure the message is an array\npm.test(\"response message is a non empty array\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.message.length).to.be.greaterThan(0);\n});\n\n//ensure the list of images are jpg and are of hounds\npm.test(\"response images are jpg and are of hounds\", function() {\n    var jsonData = pm.response.json();\n    \n    for (var image of jsonData.message) {\n        pm.expect(image).to.include(\".jpg\");\n        pm.expect(image).to.include(\"hound\");\n    }\n});\n",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "33ac38c6-b1d5-4273-8a20-ae2fbd8e71af",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "9cae2533-022b-467d-81bc-2677ef84e453",
					"name": "https://dog.ceo/api/breeds/list",
					"url": "https://dog.ceo/api/breeds/list",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "23cc8094-44f7-4c96-89aa-68238e9f0999",
								"type": "text/javascript",
								"exec": [
									"//make sure the request is okay",
									"pm.test(\"response is okay\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//ensure the response is not empty and in json format",
									"pm.test(\"response is not empty and in JSON format\", function() {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"//ensure the message is an array",
									"pm.test(\"response message is an array of the correct length\", function () {",
									"    var jsonData = pm.response.json();",
									"        ",
									"    //length is okay to be hard coded since we don't expect it to change",
									"    pm.expect(jsonData.message.length).to.equal(80);",
									"});",
									""
								]
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "//make sure the request is okay\npm.test(\"response is okay\", function() {\n    pm.response.to.have.status(200);\n});\n\n//ensure the response is not empty and in json format\npm.test(\"response is not empty and in JSON format\", function() {\n    pm.response.to.be.withBody;\n    pm.response.to.be.json;\n});\n\n//ensure the message is an array\npm.test(\"response message is an array of the correct length\", function () {\n    var jsonData = pm.response.json();\n        \n    //length is okay to be hard coded since we don't expect it to change\n    pm.expect(jsonData.message.length).to.equal(80);\n});\n",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "33ac38c6-b1d5-4273-8a20-ae2fbd8e71af",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "ac54c874-7b9c-4b9a-98d2-84b4416f44a1",
					"name": "https://dog.ceo/api/breed/hound/list",
					"url": "https://dog.ceo/api/breed/hound/list",
					"description": "Request a list of sub breeds of hounds",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "ccabb198-c956-4c45-a7e7-c687c100d2c6",
								"type": "text/javascript",
								"exec": [
									"//make sure the request is okay",
									"pm.test(\"response is okay\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//ensure the response is not empty and in json format",
									"pm.test(\"response is not empty and in JSON format\", function() {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"//ensure the message is an array",
									"pm.test(\"response message is an array of the correct length\", function () {",
									"    var jsonData = pm.response.json();",
									"    //length is okay to be hard coded since we don't expect it to change",
									"    pm.expect(jsonData.message.length).to.equal(6);",
									"});",
									""
								]
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "//make sure the request is okay\npm.test(\"response is okay\", function() {\n    pm.response.to.have.status(200);\n});\n\n//ensure the response is not empty and in json format\npm.test(\"response is not empty and in JSON format\", function() {\n    pm.response.to.be.withBody;\n    pm.response.to.be.json;\n});\n\n//ensure the message is an array\npm.test(\"response message is an array of the correct length\", function () {\n    var jsonData = pm.response.json();\n    //length is okay to be hard coded since we don't expect it to change\n    pm.expect(jsonData.message.length).to.equal(6);\n});\n",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "33ac38c6-b1d5-4273-8a20-ae2fbd8e71af",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "c4ee9470-6e5f-468d-8f4e-0aea58bd0fdb",
					"name": "https://dog.ceo/api/breeds/list/all",
					"url": "https://dog.ceo/api/breeds/list/all",
					"description": "Request the list of all dog breeds",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "9e03bb32-2676-432d-8698-fbd889891306",
								"type": "text/javascript",
								"exec": [
									"//make sure the request is okay",
									"pm.test(\"response is okay\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//ensure the response is not empty and in json format",
									"pm.test(\"response is not empty and in JSON format\", function() {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"//make sure that sub breeds are shown correctly",
									"pm.test(\"response displays correct sub breeds\", function() {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    //example of testing this would be to grab a breed with existing",
									"    //sub breeds and checking that it's not an empty array and a breed",
									"    //without sub breeds and checking that it is an empty array",
									"    pm.expect(jsonData.message.bulldog.length).to.be.greaterThan(0);",
									"    ",
									"    pm.expect(jsonData.message.beagle.length).to.equal(0);",
									"});"
								]
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "//make sure the request is okay\npm.test(\"response is okay\", function() {\n    pm.response.to.have.status(200);\n});\n\n//ensure the response is not empty and in json format\npm.test(\"response is not empty and in JSON format\", function() {\n    pm.response.to.be.withBody;\n    pm.response.to.be.json;\n});\n\n//make sure that sub breeds are shown correctly\npm.test(\"response displays correct sub breeds\", function() {\n    var jsonData = pm.response.json();\n    \n    //example of testing this would be to grab a breed with existing\n    //sub breeds and checking that it's not an empty array and a breed\n    //without sub breeds and checking that it is an empty array\n    pm.expect(jsonData.message.bulldog.length).to.be.greaterThan(0);\n    \n    pm.expect(jsonData.message.beagle.length).to.equal(0);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "33ac38c6-b1d5-4273-8a20-ae2fbd8e71af",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "d3e5229c-e9e9-48b5-8d11-67854a303ff2",
					"name": "https://dog.ceo/api/breeds/image/random",
					"url": "https://dog.ceo/api/breeds/image/random ",
					"description": "Requesting a random picture of a dog",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "db0dd2e6-4b51-4a39-9a87-3f6dae2a1791",
								"type": "text/javascript",
								"exec": [
									"//make sure the request is okay",
									"pm.test(\"response status is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//ensure the response is not empty and in json format",
									"pm.test(\"response is not empty and in JSON format\", function() {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"//make sure the response has a success status",
									"pm.test(\"response is successful\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.equal(\"success\");",
									"});",
									"",
									"//make sure that the response is a jpg image",
									"pm.test(\"response is a jpg image\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\".jpg\");",
									"});",
									""
								]
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "//make sure the request is okay\npm.test(\"response status is 200\", function() {\n    pm.response.to.have.status(200);\n});\n\n//ensure the response is not empty and in json format\npm.test(\"response is not empty and in JSON format\", function() {\n    pm.response.to.be.withBody;\n    pm.response.to.be.json;\n});\n\n//make sure the response has a success status\npm.test(\"response is successful\", function() {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.status).to.equal(\"success\");\n});\n\n//make sure that the response is a jpg image\npm.test(\"response is a jpg image\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.message).to.include(\".jpg\");\n});\n",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "33ac38c6-b1d5-4273-8a20-ae2fbd8e71af",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "f1c9e6d4-d987-4b38-b86b-c89e9086a044",
					"name": "https://dog.ceo/api/breed/hound/images/random",
					"url": "https://dog.ceo/api/breed/hound/images/random",
					"description": "Request a random image of a hound",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "108e2177-e6b1-4ce1-8b33-5e315154c2d7",
								"type": "text/javascript",
								"exec": [
									"//make sure the request is okay",
									"pm.test(\"response is okay\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//ensure the response is not empty and in json format",
									"pm.test(\"response is not empty and in JSON format\", function() {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"//ensure the message is an array",
									"pm.test(\"response message is non empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.message.length).to.be.greaterThan(0);",
									"});",
									"",
									"//ensure the list of images are jpg and are of hounds",
									"pm.test(\"response image is a jpg and is a hound\", function() {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.message).to.include(\".jpg\");",
									"    pm.expect(jsonData.message).to.include(\"hound\");",
									"});",
									""
								]
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "//make sure the request is okay\npm.test(\"response is okay\", function() {\n    pm.response.to.have.status(200);\n});\n\n//ensure the response is not empty and in json format\npm.test(\"response is not empty and in JSON format\", function() {\n    pm.response.to.be.withBody;\n    pm.response.to.be.json;\n});\n\n//ensure the message is an array\npm.test(\"response message is non empty\", function () {\n    var jsonData = pm.response.json();\n    \n    pm.expect(jsonData.message.length).to.be.greaterThan(0);\n});\n\n//ensure the list of images are jpg and are of hounds\npm.test(\"response image is a jpg and is a hound\", function() {\n    var jsonData = pm.response.json();\n    \n    pm.expect(jsonData.message).to.include(\".jpg\");\n    pm.expect(jsonData.message).to.include(\"hound\");\n});\n",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "33ac38c6-b1d5-4273-8a20-ae2fbd8e71af",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "fdbdf70a-8302-4ed6-b535-ede4537e73e9",
					"name": "https://dog.ceo/api/breed/retriever/golden/images/random",
					"url": "https://dog.ceo/api/breed/retriever/golden/images/random",
					"description": "Request a random golden retriever image",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "7e73fe3f-2b1c-40d2-9ecd-2d21cc143fec",
								"type": "text/javascript",
								"exec": [
									"//make sure the request is okay",
									"pm.test(\"response is okay\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//ensure the response is not empty and in json format",
									"pm.test(\"response is not empty and in JSON format\", function() {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"//ensure the message is an array",
									"pm.test(\"response message is non empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.message.length).to.be.greaterThan(0);",
									"});",
									"",
									"//ensure the list of images are jpg and are of hounds",
									"pm.test(\"response image is a jpg and is a golden retriever\", function() {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.message).to.include(\".jpg\");",
									"    pm.expect(jsonData.message).to.include(\"retriever-golden\");",
									"});",
									""
								]
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "//make sure the request is okay\npm.test(\"response is okay\", function() {\n    pm.response.to.have.status(200);\n});\n\n//ensure the response is not empty and in json format\npm.test(\"response is not empty and in JSON format\", function() {\n    pm.response.to.be.withBody;\n    pm.response.to.be.json;\n});\n\n//ensure the message is an array\npm.test(\"response message is non empty\", function () {\n    var jsonData = pm.response.json();\n    \n    pm.expect(jsonData.message.length).to.be.greaterThan(0);\n});\n\n//ensure the list of images are jpg and are of hounds\npm.test(\"response image is a jpg and is a golden retriever\", function() {\n    var jsonData = pm.response.json();\n    \n    pm.expect(jsonData.message).to.include(\".jpg\");\n    pm.expect(jsonData.message).to.include(\"retriever-golden\");\n});\n",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "33ac38c6-b1d5-4273-8a20-ae2fbd8e71af",
					"headers": "",
					"pathVariables": {}
				}
			]
		}
	],
	"environments": [],
	"headerPresets": [],
	"globals": []
}